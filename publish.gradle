apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'

Properties properties = new Properties()
boolean isHasFile = false
File file = new File(rootDir.getAbsolutePath() + "/local.properties")
if (file.exists()) {
    isHasFile = true
    properties.load(file.newDataInputStream())
}

def gitUrl = 'https://github.com/whosmyqueen/hardware-utils.git'   // Git仓库的url
def siteUrl = 'https://github.com/whosmyqueen/hardware-utils'   // 项目的主页

def libraryVersion = android.defaultConfig.versionName
def groupId = "com.whosmyqueen.hardware"
def aarId = "hardware-utils"
def libraryDesc = "Delegates for kotlin on android that check UI thread"
def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            id 'whosmyqueen'        //填写bintray或者github的用户名
            name '郑志辉'         //姓名，可以是中文
            email '644049260@qq.com'
        }
    }
    scm {
        connection gitUrl
        developerConnection gitUrl
        url siteUrl
    }
}

def publicationNames = []
publishing.publications {
    android.libraryVariants.all { variant ->
        if (variant.buildType.name == "debug") return // Prevents publishing debug library

        def flavored = !variant.flavorName.isEmpty()

        /**
         * Translates "_" in flavor names to "-" for artifactIds, because "-" in flavor name is an
         * illegal character, but is well used in artifactId names.
         */
        def variantArtifactId = flavored ? aarId + "-" + variant.flavorName.replace('_', '-') : aarId

        /**
         * If the javadoc destinationDir wasn't changed per flavor, the libraryVariants would
         * overwrite the javaDoc as all variants would write in the same directory
         * before the last javadoc jar would have been built, which would cause the last javadoc
         * jar to include classes from other flavors that it doesn't include.
         *
         * Yes, tricky.
         *
         * Note that "${buildDir}/docs/javadoc" is the default javadoc destinationDir.
         */
//        def javaDocDestDir = file("${buildDir}/docs/javadoc ${flavored ? variantArtifactId : ""}")

        /**
         * Includes
         */
        def sourceDirs = variant.sourceSets.collect {
            it.javaDirectories // Also includes kotlin sources if any.
        }
//        def javadoc = task("${variant.name}Javadoc", type: Javadoc) {
//            description "Generates Javadoc for ${variant.name}."
//            source = variant.javaCompile.source // Yes, javaCompile is deprecated,
//            // but I didn't find any working alternative. Please, tweet @Louis_CAD if you find one.
//            destinationDir = javaDocDestDir
//            classpath += files(android.getBootClasspath().join(File.pathSeparator))
//            classpath += files(configurations.compile)
//            options.links("http://docs.oracle.com/javase/7/docs/api/");
//            options.links("http://d.android.com/reference/");
//            exclude '**/BuildConfig.java'
//            exclude '**/R.java'
//            failOnError false
//        }
//        def javadocJar = task("${variant.name}JavadocJar", type: Jar, dependsOn: javadoc) {
//            description "Puts Javadoc for ${variant.name} in a jar."
//            classifier = 'javadoc'
//            from javadoc.destinationDir
//        }
        def sourcesJar = task("${variant.name}SourcesJar", type: Jar) {
            description "Puts sources for ${variant.name} in a jar."
            from sourceDirs
            classifier = 'sources'
        }

        def publicationName = "splitties${variant.name.capitalize()}Library"
        publicationNames.add(publicationName)

        "$publicationName"(MavenPublication) {
            artifactId variantArtifactId
            group groupId
            version libraryVersion

            artifact variant.outputs[0].packageLibrary // This is the aar library
            artifact sourcesJar
//            artifact javadocJar

            pom {
                packaging 'aar'
                withXml {
                    def root = asNode()
                    root.appendNode("name", 'Splitties')
                    root.appendNode("url", siteUrl)
                    root.children().last() + pomConfig
                    def depsNode = root.appendNode("dependencies")
                    def addDep = {
                        if (it.group == null) return // Avoid empty dependency nodes
                        def dependencyNode = depsNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        if (it.hasProperty('optional') && it.optional) {
                            dependencyNode.appendNode('optional', 'true')
                        }
                    }

                    // Add deps that everyone has
                    configurations.compile.allDependencies.each addDep
                    configurations.implementation.allDependencies.each addDep
                    // Add flavor specific deps
                    if (flavored) {
                        configurations["${variant.flavorName}Compile"].allDependencies.each addDep
                        configurations["${variant.flavorName}Implementation"].allDependencies.each addDep
                    }
                    // NOTE: This library doesn't use builtTypes specific dependencies, so no need to add them.
                }
            }
        }
    }
}

group = groupId
version = libraryVersion

afterEvaluate {
    bintray {
        user = isHasFile ? properties.getProperty("bintray.user") : System.getenv("bintray_user")
        key = isHasFile ? properties.getProperty("bintray.apikey") : System.getenv("bintray_apikey")
        publications = publicationNames

        override = true
        pkg {
            repo = 'maven'
            name = aarId
            desc = libraryDesc
            publish = true // 是否是公开项目。
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = ['Apache-2.0']
            labels = ['aar', 'android']
            publicDownloadNumbers = true
        }
    }
}
